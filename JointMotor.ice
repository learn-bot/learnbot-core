//******************************************************************
// 
//  Generated by IDSL to IDL Translator
//  
//  File name: JointMotor.idl
//  Source: JointMotor.idsl
//  
//******************************************************************   
#ifndef ROBOCOMPJOINTMOTOR_ICE
#define ROBOCOMPJOINTMOTOR_ICE

module RoboCompJointMotor{
	exception HardwareFailedException{string what;};
	exception OutOfRangeException{string what;};
	exception UnknownMotorException{string what;};
	struct MotorState{
		int p;
		int v;
		int temperature;
		bool isMoving;
		float pos;
					float vel;
					float power;
					string timeStamp;
	};
	dictionary<string, MotorState>MotorStateMap;
	struct MotorParams{
		bool invertedSign; //Deprecated do not use this, unitrange should be used instead
		byte busId;
		float minPos;
		float maxPos;
		float maxVelocity;
		float zeroPos;
		float stepsRange;
		float maxDegrees; //Deprecated use unitrange
		string name;
		float offset;
		float unitsRange;
	};
	sequence <MotorParams> MotorParamsList;
	struct BusParams{
		int numMotors;
		int baudRate;
		int basicPeriod;
		string handler;
		string device;
	};
	struct MotorGoalPosition{
		float position;
					float maxSpeed;
					string name;
	};
	sequence <MotorGoalPosition> MotorGoalPositionList;
	struct MotorGoalVelocity{
		float velocity;
					float maxAcc;
					string name;
	};
	sequence <MotorGoalVelocity> MotorGoalVelocityList;
	sequence <string> MotorList;

	interface JointMotor{
		void  setPosition(MotorGoalPosition goal)throws UnknownMotorException, HardwareFailedException;
		void  setVelocity(MotorGoalVelocity goal)throws UnknownMotorException, HardwareFailedException;
		void  setZeroPos(string name)throws UnknownMotorException, HardwareFailedException;
		void  setSyncPosition(MotorGoalPositionList listGoals)throws UnknownMotorException, HardwareFailedException;
		void  setSyncVelocity(MotorGoalVelocityList listGoals)throws UnknownMotorException, HardwareFailedException;
		void  setSyncZeroPos()throws UnknownMotorException, HardwareFailedException;
		MotorParams getMotorParams(string motor)throws UnknownMotorException;
		MotorState getMotorState(string motor)throws UnknownMotorException;
		MotorStateMap getMotorStateMap(MotorList mList)throws UnknownMotorException;
		void  getAllMotorState(out MotorStateMap mstateMap)throws UnknownMotorException;
		MotorParamsList getAllMotorParams();
		BusParams getBusParams();
	};
};
  
#endif